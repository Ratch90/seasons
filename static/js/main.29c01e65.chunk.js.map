{"version":3,"sources":["SeasonsDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Spinner","message","defaultProps","App","state","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","console","log","this","renderContent","React","Component","ReactDOM","render","document","querySelector"],"mappings":"sMAGMA,G,MAAe,CACjBC,OAAS,CACLC,KAAO,qBACPC,SAAW,OAEfC,OAAS,CACLF,KAAO,kBACPC,SAAW,eA4BJE,EAfO,SAAAC,GAElB,IAXeC,EAAIC,EAWbC,GAXSF,EAWUD,EAAMC,KAXZC,GAWgB,IAAIE,MAAOC,YATlC,GAAKH,EAAQ,EACfD,EAAM,EAAI,SAAW,SAEpBA,EAAM,EAAI,SAAW,UAIL,EAGAP,EAAaS,GAAhCP,EAHmB,EAGnBA,KAAMC,EAHa,EAGbA,SAEd,OAEI,yBAAKS,UAAS,yBAAsBH,IAChC,uBAAGG,UAAS,UAAMT,EAAN,6BACZ,4BAAKD,GACL,uBAAGU,UAAS,UAAMT,EAAN,gCC/BlBU,EAAU,SAACP,GACb,OACI,yBAAKM,UAAU,oBACX,yBAAKA,UAAU,sBACVN,EAAMQ,WAMvBD,EAAQE,aAAe,CACnBD,QAAU,aAGCD,QCXTG,E,YAEF,WAAYV,GAAQ,IAAD,8BACf,4CAAMA,KACDW,MAAQ,CACTV,IAAM,KACNW,aAAe,IAJJ,E,iFAQE,IAAD,OAEhBC,OAAOC,UAAUC,YAAYC,oBACzB,SAACC,GACG,EAAKC,SAAS,CAACjB,IAAMgB,EAASE,OAAOC,cAEzC,SAACC,GACG,EAAKH,SAAS,CAACN,aAAeS,EAAIb,aAG1Cc,QAAQC,IAAI,6C,2CAIZD,QAAQC,IAAI,mD,sCAKZ,OAAIC,KAAKb,MAAMC,eAAiBY,KAAKb,MAAMV,IAChC,wCAAcuB,KAAKb,MAAMC,eAG1BY,KAAKb,MAAMC,cAAgBY,KAAKb,MAAMV,IACrC,kBAAC,EAAD,CAAeA,IAAOuB,KAAKb,MAAMV,MAIjC,kBAAC,EAAD,CAASO,QAAU,qC,+BAM9B,OACI,yBAAKF,UAAU,cACVkB,KAAKC,qB,GA9CJC,IAAMC,WAqDxBC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,cAAc,W","file":"static/js/main.29c01e65.chunk.js","sourcesContent":["import React from 'react'\r\nimport './SeasonDisplay.css' \r\n\r\nconst seasonConfig = {\r\n    summer : {\r\n        text : 'Lets hit the beach',\r\n        iconName : 'sun'\r\n    },\r\n    winter : {\r\n        text : 'Burr,it is cold',\r\n        iconName : 'snowflake'\r\n    }\r\n};\r\n\r\nconst getSeason = (lat,month) => {\r\n\r\n    if (month > 2 && month < 9) {\r\n       return lat > 0 ? 'summer' : 'winter'\r\n    } else {\r\n        return lat > 0 ? 'winter' : 'summer'\r\n    }\r\n};\r\n\r\nconst SeasonDisplay = props => {\r\n    \r\n    const season = getSeason(props.lat,new Date().getMonth());\r\n    const { text, iconName } = seasonConfig[season];\r\n    \r\n    return (\r\n       \r\n        <div className = {`season-display ${season}`}>\r\n            <i className= {`${iconName} icon massive icon-left`}></i>\r\n            <h1>{text}</h1>\r\n            <i className= {`${iconName} icon massive icon-right`}></i>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SeasonDisplay;\r\n\r\n","import React from 'react'\r\n\r\nconst Spinner = (props) => {\r\n    return (\r\n        <div className='ui active dimmer'>\r\n            <div className='ui big text loader'>\r\n                {props.message}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nSpinner.defaultProps = {\r\n    message : 'Loading..'\r\n};\r\n\r\nexport default Spinner;","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport SeasonDisplay from './SeasonsDisplay'\r\nimport Spinner from './Spinner'\r\n\r\nclass App extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            lat : null,\r\n            errorMessage : ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        window.navigator.geolocation.getCurrentPosition(\r\n            (position) => {\r\n                this.setState({lat : position.coords.latitude});\r\n            },\r\n            (err) => {\r\n                this.setState({errorMessage : err.message})\r\n            }\r\n        )\r\n        console.log('My component was rendered to the screen');\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        console.log('My component was just updated - it rerendered');\r\n    }\r\n\r\n    renderContent () {\r\n\r\n        if (this.state.errorMessage && !this.state.lat) {\r\n            return <div>Error : {this.state.errorMessage}</div>\r\n        }\r\n         \r\n        else if (!this.state.errorMessage && this.state.lat) {\r\n            return <SeasonDisplay lat = {this.state.lat}/>\r\n        }\r\n\r\n        else {\r\n            return <Spinner message = 'Please accept location request' />\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className='border red'>\r\n                {this.renderContent()}\r\n            </div>\r\n        )\r\n        \r\n    }\r\n}\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.querySelector('#root')\r\n);"],"sourceRoot":""}